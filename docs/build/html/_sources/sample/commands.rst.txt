========
Commands
========

App Structure
-------------

Once you have executed the cookiecutter template.  You will have the following directory and file structure in your new addin folder.

When running an addin Fusion 360 expects to see a directory with a .py and .manifest file all with the same name.  This is the minimum requirement for your application to be recognized.  You should see these two files with your app name in the new directory.  The manifest file doesn't really require much editing.

::

    ApperSample
    ├── apper
    │   └── ...
    ├── commands
    │   ├── SampleCommand1.py
    │   ├── SampleCommand2.py
    │   ├── SamplePaletteCommand.py
    │   ├── SampleCustomEvent.py
    │   ├── SampleDocumentEvent.py
    │   ├── SampleWorkspaceEvent.py
    │   └── resources
    │       ├── command_icons
    │       │   └── ...
    │       └── palette_icons
    │           └── ...
    ├── ApperSample.py
    ├── ApperSample.manifest
    ├── LICENCE.txt
    └── README.md


Your_App.py (ApperSample in this case) is the main entry point to the app.  Here you will define the commands that will be added and where they will be placed in the ui.

Imports
-------

In this sample the commands and events are defined in a number of files that need to be imported.  Typically I create each command in its own file unless there are two commands that will be sharing much of the same logic, but it doesn't really matter.

.. code-block::

    import traceback

    import adsk.core
    from .apper import apper

    # Basic Fusion 360 Command Base samples
    from .commands.SampleCommand1 import SampleCommand1
    from .commands.SampleCommand2 import SampleCommand2

    # Palette Command Base samples
    from .commands.SamplePaletteCommand import SamplePaletteSendCommand, SamplePaletteShowCommand

    # Various Application event samples
    from .commands.SampleCustomEvent import SampleCustomEvent1
    from .commands.SampleDocumentEvents import SampleDocumentEvent1, SampleDocumentEvent2
    from .commands.SampleWorkspaceEvents import SampleWorkspaceEvent1


Create the App
--------------

To create commands in your addin the first step is to create an instance of :class:`FusionApp <apper.FusionApp>`.

.. code-block::

    my_addin = apper.FusionApp('ApperSample ', "Autodesk ", False)

Standard Commands
-----------------

Commands are created by subclassing :class:`FusionCommandBase <apper.Fusion360CommandBase>` and overriding their *on_xxx* methods.

You add commands to an apper based add-in by calling the :func:`add_command <apper.FusionApp.add_command>` function

    .. autofunction:: apper.FusionApp.FusionApp.add_command

Command Definition
^^^^^^^^^^^^^^^^^^

This is adding the command to a panel called "Commands" on the apps Tab in the solid environment.

**SampleCommand1** is the basic *Hello World* Fusion 360 command.

It adds a button to the UI that, when clicked, will display a message box with some text.

.. code-block::

    my_addin.add_command(
        'Sample Command 1',
        SampleCommand1,
        {
            'cmd_description': 'Hello World!',
            'cmd_id': 'sample_cmd_1',
            'workspace': 'FusionSolidEnvironment',
            'toolbar_panel_id': 'Commands',
            'cmd_resources': 'command_icons',
            'command_visible': True,
            'command_promoted': True,
        }
    )

`Learn more about available options by clicking here <usage/options>`_

Command Class
^^^^^^^^^^^^^

This command class is defined in a separate file called **SampleCommand1.py**

You can see we are subclassing the Fusion360CommandBase.  It is not really important to understand the details of this, but if you just follow this format it will be easy to replicate.

Inside your command class definition you will override one or methods :

* :func:`on_create <apper.Fusion360CommandBase.on_create>`
* :func:`on_execute <apper.Fusion360CommandBase.on_execute>`
* :func:`on_preview <apper.Fusion360CommandBase.on_preview>`
* :func:`on_input_changed <apper.Fusion360CommandBase.on_input_changed>`
* :func:`on_destroy <apper.Fusion360CommandBase.on_destroy>`

.. code-block::

    import adsk.core
    from ..apper import apper
    from ..apper.apper import AppObjects


    class SampleCommand1(apper.Fusion360CommandBase):
        def on_execute(self, command: adsk.core.Command, inputs: adsk.core.CommandInputs, args, input_values):
            ao = AppObjects()
            ao.ui.messageBox("Hello World!")

